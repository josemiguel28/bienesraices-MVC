<?phpnamespace MVC;class Router{    public $rutasGET = [];    public $rutasPOST = [];    /**     * Este método se utiliza para agregar una nueva ruta al array $rutasGET.     *     * @param string $url La URL de la ruta a agregar.     * @param callable $fn La función que se ejecutará cuando se acceda a la ruta.     */    public function get($url, $fn)    {        $this->rutasGET[$url] = $fn;    }    public function post($url, $fn)    {        $this->rutasPOST[$url] = $fn;    }    /**     * Este método se utiliza para comprobar la URL actual y ejecutar la función correspondiente.     */    public function comprobarURL(): void    {        session_start();        $auth = $_SESSION["login"] ?? null;        //arreglo de rutas protegidas        $rutas_protegidas = [            "/admin",            "/propiedades/crear",            "/propiedades/actualizar",            "/propiedades/eliminar",            "/vendedores/crear",            "/vendedores/actualizar",            "/vendedores/mostrar"        ];        $urlActual = $_SERVER["PATH_INFO"] ?? "/";        $metodo = $_SERVER["REQUEST_METHOD"];        if ($metodo == "GET") {            if (array_key_exists($urlActual, $this->rutasGET)) {                $fn = $this->rutasGET[$urlActual];            }        } else if ($metodo == "POST") {            if (array_key_exists($urlActual, $this->rutasPOST)) {                $fn = $this->rutasPOST[$urlActual];            }        } else {            // Manejar el caso en que la URL no existe en el array            echo "Pagina no encontrada";        }        //verifica si el usuario esta autenticado        if (in_array($urlActual, $rutas_protegidas) && !$auth) {            header("Location: /");        }        if ($fn) {            call_user_func($fn, $this);        }    }    /**     * Este método se utiliza para renderizar una vista con los datos proporcionados.     *     * @param string $view El nombre de la vista a renderizar.     * @param array $datos Los datos a pasar a la vista.     */    public function render(string $view, array $datos = []): void    {        // Convierte cada par clave-valor en el array $datos en una variable con el mismo nombre que la clave y el valor correspondiente.        foreach ($datos as $key => $value) {            $$key = $value;        }        // Inicia el almacenamiento en búfer de salida.        ob_start();        include __DIR__ . "/views/$view.php";        // Obtiene el contenido del búfer de salida y luego limpia el búfer.        $contenido = ob_get_clean();        include __DIR__ . "/views/layout.php";    }}