<?phpnamespace Model;class ActiveRecord{    //base de datos    protected static $db;    protected static array $columnaDb = [];    protected static string $tabla = '';    //validacion    protected static array $errores = [];    //definir la conxecion a la base de datos    public static function setDB($database): void    {        self::$db = $database;    }    public function guardar(): void    {        if (isset($this->id)) {            $this->actualizar();        } else {            $this->crear();        }    }    public function crear(): void    {        //sanitizar los datos antes de insertar a la db        $atributos = $this->sanitizarDatos();        $query = "INSERT INTO " . static::$tabla . "(";        $query .= join(", ", array_keys($atributos));        $query .= " ) VALUES ('";        $query .= join("', '", array_values($atributos));        $query .= " '); ";        $resultado = self::$db->query($query);        if ($resultado) {            //redirecciona al usuario            header('Location: /admin?resultado=1');        }    }    public function actualizar(): void    {        //sanitizar los datos antes de insertar a la db        $atributos = $this->sanitizarDatos();        $valores = [];        foreach ($atributos as $key => $value) {            $valores[] = "{$key} = '{$value}'";        }        $query = "UPDATE " . static::$tabla . " SET ";        $query .= join(', ', $valores);        $query .= " WHERE id = '" . self::$db->escape_string($this->id) . "' ";        $query .= " LIMIT 1";        $resultado = self::$db->query($query);;        if ($resultado) {            //redirecciona al usuario            header('Location: /admin?resultado=2');        }    }    public function eliminarUnRegistro($id): void    {        $this->deleteImage();        $query = "DELETE FROM " . static::$tabla . " WHERE id = $id LIMIT 1";        $resultado = self::$db->query($query);        if ($resultado) {            header('Location: /admin?resultado=3');        }    }    public function setImagen($imagen): void    {        if (isset($this->id)) {            $this->deleteImage();        }        //asignar al atributo de la imagen el nombre de la imagen        if ($imagen) {            $this->imagen = $imagen;        }    }    private function deleteImage(): void    {        //comprueba si existe el archivo        if (file_exists(CARPETA_IMAGENES . $this->imagen)) {            unlink(CARPETA_IMAGENES . $this->imagen);        }    }    //validacion    public static function getErrores(): array    {        return static::$errores;    }    public function validar(): array    {        static::$errores = [];        return static::$errores;    }    //lista las propiedades     public static function getAll(): array    {        $query = "SELECT * FROM " . static::$tabla;        return self::consultaSQL($query);    }    //lista las propiedades     public static function get($limite): array    {        $query = "SELECT * FROM " . static::$tabla . " LIMIT " . self::$db->escape_string($limite);        return self::consultaSQL($query);    }    //busca un registro por su id     public static function find($id)    {        $query = "SELECT * FROM " . static::$tabla . " WHERE id = $id";        $resultado = self::consultaSQL($query);        return array_shift($resultado);    }    //convierte el array asociativo a un objeto (principios de active record)    private static function consultaSQL($query): array    {        $array = [];        //consultar la base de datos         $resultado = self::$db->query($query);        //iterar los resultados        while ($registroDB = $resultado->fetch_assoc()) {            $array[] = static::crearObjeto($registroDB);        }        //liberar la memoria         $resultado->free();        //retornar los resultados        return $array;    }    //identificar y unir las columnas de la bd    private function atributos(): array    {        $atributos = [];        foreach (static::$columnaDb as $columna) {            //ignora el atributo id porque es autoincrement            if ($columna === "id") continue;            $atributos[$columna] = $this->$columna;        }        return $atributos;    }    private function sanitizarDatos(): array    {        $atributos = $this->atributos();        $sanitizado = [];        foreach ($atributos as $key => $value) {            $sanitizado[$key] = self::$db->escape_string($value);        }        return $sanitizado;    }    private static function crearObjeto($registro): static    {        $objeto = new static;        foreach ($registro as $key => $value) {            if (property_exists($objeto, $key)) {                $objeto->$key = s($value);            }        }        return $objeto;    }    //sincroniza los valores existentes con los nuevos valores en "actualizar . php"    public function sincronizar($args = []): void    {        //recorre los nuevos valores, si la propiedad existe en el modelo actual, entonces        // que tome los valores        foreach ($args as $key => $value) {            if (property_exists($this, $key)) {                $this->$key = s($value);            }        }    }}